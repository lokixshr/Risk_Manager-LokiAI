name: Risk Manager Agent - CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags:
      - 'v*'
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: risk-manager-agent

jobs:
  # ============================================
  # Code Quality and Testing
  # ============================================
  test:
    name: Tests and Code Quality
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov black isort flake8 mypy

    - name: Create test environment file
      run: |
        cat > .env << EOF
        ENV=test
        LOG_LEVEL=ERROR
        MONGODB_URI=mongodb://admin:password@localhost:27017/test_db?authSource=admin
        ENABLE_REDIS=true
        REDIS_URL=redis://localhost:6379/0
        COINGECKO_API_KEY=test_key
        ALCHEMY_API_KEY=test_key
        ALCHEMY_URL=https://eth-mainnet.g.alchemy.com/v2/test_key
        ETHERSCAN_API_KEY=test_key
        THEGRAPH_API_KEY=test_key
        EOF

    - name: Code formatting check (Black)
      run: black --check --diff app/ tests/

    - name: Import sorting check (isort)
      run: isort --check-only --diff app/ tests/

    - name: Linting (flake8)
      run: flake8 app/ tests/ --max-line-length=100 --exclude=__pycache__

    - name: Type checking (mypy)
      run: mypy app/ --ignore-missing-imports --no-strict-optional
      continue-on-error: true  # Don't fail CI on type check issues yet

    - name: Run unit tests with coverage
      run: |
        pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=term-missing
      env:
        PYTHONPATH: ${{ github.workspace }}

    - name: Run integration tests
      run: |
        pytest tests/integration/ -v
      env:
        PYTHONPATH: ${{ github.workspace }}

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # ============================================
  # Security Scanning
  # ============================================
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install security tools
      run: |
        pip install bandit safety pip-audit

    - name: Run Bandit security linter
      run: bandit -r app/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Check for known security vulnerabilities
      run: safety check --json --output safety-report.json
      continue-on-error: true

    - name: Audit pip packages
      run: pip-audit --format=json --output=pip-audit-report.json
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          pip-audit-report.json

  # ============================================
  # Build and Push Docker Image
  # ============================================
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ============================================
  # Load Testing
  # ============================================
  load-test:
    name: Load Testing
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name != 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install load testing tools
      run: |
        pip install locust requests

    - name: Run load tests
      run: |
        # Start the application in background for testing
        docker run -d --name risk-manager-test \
          -p 8001:8001 \
          -e ENV=test \
          -e MONGODB_URI=mongodb://localhost:27017/test_db \
          -e ENABLE_REDIS=false \
          -e COINGECKO_API_KEY=test_key \
          -e ALCHEMY_API_KEY=test_key \
          -e ALCHEMY_URL=https://test.com \
          -e ETHERSCAN_API_KEY=test_key \
          -e THEGRAPH_API_KEY=test_key \
          ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest

        # Wait for service to start
        sleep 30

        # Run basic load test
        python scripts/load_test.py --host http://localhost:8001 --duration 60
      continue-on-error: true

    - name: Cleanup test container
      if: always()
      run: docker rm -f risk-manager-test || true

  # ============================================
  # Deploy to Staging
  # ============================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, load-test]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://risk-manager-staging.example.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

    - name: Create namespace if not exists
      run: kubectl create namespace risk-manager-staging --dry-run=client -o yaml | kubectl apply -f -

    - name: Create secrets
      run: |
        kubectl create secret generic risk-manager-secrets \
          --namespace=risk-manager-staging \
          --from-literal=mongodb-uri="${{ secrets.MONGODB_URI_STAGING }}" \
          --from-literal=coingecko-api-key="${{ secrets.COINGECKO_API_KEY }}" \
          --from-literal=alchemy-api-key="${{ secrets.ALCHEMY_API_KEY }}" \
          --from-literal=alchemy-url="${{ secrets.ALCHEMY_URL }}" \
          --from-literal=etherscan-api-key="${{ secrets.ETHERSCAN_API_KEY }}" \
          --from-literal=thegraph-api-key="${{ secrets.THEGRAPH_API_KEY }}" \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy to Kubernetes
      run: |
        # Update image tag in deployment
        sed -i "s|image: risk-manager-agent:latest|image: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|" k8s/deployment.yaml
        
        # Apply all Kubernetes manifests
        kubectl apply -f k8s/ --namespace=risk-manager-staging

    - name: Wait for deployment to complete
      run: |
        kubectl rollout status deployment/risk-manager-agent --namespace=risk-manager-staging --timeout=300s

    - name: Run smoke tests
      run: |
        # Get service endpoint
        STAGING_URL=$(kubectl get ingress risk-manager-ingress --namespace=risk-manager-staging -o jsonpath='{.spec.rules[0].host}' || echo "localhost")
        
        # Run basic smoke tests
        python scripts/smoke_test.py --url https://${STAGING_URL}
      continue-on-error: true

  # ============================================
  # Deploy to Production
  # ============================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, load-test]
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://risk-manager.example.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

    - name: Create namespace if not exists
      run: kubectl create namespace risk-manager-prod --dry-run=client -o yaml | kubectl apply -f -

    - name: Create production secrets
      run: |
        kubectl create secret generic risk-manager-secrets \
          --namespace=risk-manager-prod \
          --from-literal=mongodb-uri="${{ secrets.MONGODB_URI_PRODUCTION }}" \
          --from-literal=coingecko-api-key="${{ secrets.COINGECKO_API_KEY }}" \
          --from-literal=alchemy-api-key="${{ secrets.ALCHEMY_API_KEY }}" \
          --from-literal=alchemy-url="${{ secrets.ALCHEMY_URL }}" \
          --from-literal=etherscan-api-key="${{ secrets.ETHERSCAN_API_KEY }}" \
          --from-literal=thegraph-api-key="${{ secrets.THEGRAPH_API_KEY }}" \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy to Production
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        
        # Update image tag in deployment
        sed -i "s|image: risk-manager-agent:latest|image: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${VERSION}|" k8s/deployment.yaml
        
        # Apply production configuration
        kubectl apply -f k8s/ --namespace=risk-manager-prod

    - name: Wait for production deployment
      run: |
        kubectl rollout status deployment/risk-manager-agent --namespace=risk-manager-prod --timeout=600s

    - name: Run production health checks
      run: |
        # Wait a bit for the service to fully start
        sleep 60
        
        # Get production URL
        PROD_URL=$(kubectl get ingress risk-manager-ingress --namespace=risk-manager-prod -o jsonpath='{.spec.rules[0].host}' || echo "localhost")
        
        # Run comprehensive health checks
        python scripts/production_health_check.py --url https://${PROD_URL}

    - name: Create deployment notification
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          Risk Manager Agent deployment to production: ${{ job.status }}
          Version: ${{ github.ref }}
          Commit: ${{ github.sha }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ============================================
  # Post-deployment monitoring
  # ============================================
  post-deployment:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Setup monitoring alerts
      run: |
        echo "Setting up post-deployment monitoring..."
        # Here you would typically:
        # - Enable enhanced monitoring
        # - Set up deployment-specific alerts
        # - Schedule synthetic tests
        # - Update status pages

    - name: Schedule post-deployment tests
      run: |
        echo "Scheduling comprehensive post-deployment validation..."
        # Schedule automated tests to run over the next few hours